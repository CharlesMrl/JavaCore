package wechesspresso;
import chesspresso.position.*;
import chesspresso.move.*;
import java.util.Scanner;



public class WeChesspresso {
    
    public static String moveValidator(String fen,String move){
        Position pos=new Position(fen);
        move=move.substring(0,2)+"-"+move.substring(2,4);
        short[] allMoves;
        allMoves=pos.getAllMoves();
        System.out.println("Coups possibles : ");
        for(int i=0;i<allMoves.length;i++){
            
            System.out.println(Move.getString(allMoves[i]));
            if(move.equals(Move.getString(allMoves[i]).replace('x', '-'))){
                try{
                    pos.doMove(allMoves[i]);
                    return pos.getFEN();
                }
                catch(IllegalMoveException e){
                    System.out.println(e.toString());
                }
            }
        }
        return "no";
    }
    
    public static String moveValidator(String fen,String pos1, String pos2){
        Position pos=new Position(fen);
        String move=pos1+"-"+pos2;
        short[] allMoves;
        allMoves=pos.getAllMoves();
        for(int i=0;i<allMoves.length;i++){
            if(move.equals(Move.getString(allMoves[i]))){
                try{
                    pos.doMove(allMoves[i]);
                    return pos.getFEN();
                }
                catch(IllegalMoveException e){
                    System.out.println(e.toString());
                }
            }
        }
        return "no";
    }
    
    public static boolean isMoveValid(String fen, String pos1, String pos2){
        Position pos=new Position(fen);
        String move=pos1+"-"+pos2;
        short[] allMoves;
        allMoves=pos.getAllMoves();
        for(int i=0;i<allMoves.length;i++){
            if(move.equals(Move.getString(allMoves[i]))){
                return true;
            }
        }
        return false;
    }
    
    public static boolean isMoveValid(String fen, String move){
        Position pos=new Position(fen);
        move=move.substring(0,2)+"-"+move.substring(2,4);
        short[] allMoves;
        allMoves=pos.getAllMoves();
        for(int i=0;i<allMoves.length;i++){
            if(move.equals(Move.getString(allMoves[i]))){
                return true;
            }
        }
        return false;
    }
    
    public static boolean isCheck(String fen){
        Position pos=new Position(fen);
        return pos.isCheck();
    }
    
    public static boolean isPat(String fen){
        Position pos=new Position(fen);
        return pos.isStaleMate();
    }
    
    public static boolean isCheckMate(String fen){
        Position pos=new Position(fen);
        return pos.isMate();
    }
    
    private static short getShortMoveFromString(String fen, String move){
        Position pos =new Position(fen);
        move=move.substring(0,2)+"-"+move.substring(2,4);
        short[] allMoves;
        allMoves=pos.getAllMoves();
        for(int i =0;i<allMoves.length;i++){
            if(move.equals(Move.getString(allMoves[i]))){
                return allMoves[i];
            }
        }
        return 0;
    }
    
    public static String getMoveType(String fen, String move){
        Position pos =new Position(fen);
        short shortmove=getShortMoveFromString(fen,move);
        short[] allCapturingMoves;
        short[] allNonCapturingMoves;
        short[] allMoves;
        
        allCapturingMoves=pos.getAllCapturingMoves();
        allNonCapturingMoves=pos.getAllNonCapturingMoves();
        allMoves=pos.getAllMoves();
        
         for(int i=0;i<allMoves.length;i++){
            if(Move.isEPMove(shortmove)){
                return "ep";
            }
            if(Move.isLongCastle(shortmove)){
                return "gr";
            }
            if(Move.isShortCastle(shortmove)){
                return "pr";
            }
        }
        
        for(int i=0;i<allCapturingMoves.length;i++){
            if(move.equals(Move.getString(allCapturingMoves[i]))){
                return "c";
            }
        }
        
        for(int i=0;i<allNonCapturingMoves.length;i++){
            if(move.equals(Move.getString(allNonCapturingMoves[i]))){
                return "d";
            }
        }
        return "no";
    }
    
    public static void main(String[] args) {
        
        //Pour jouer alone
        /*String fen="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
        String move,newfen;
        Scanner input = new Scanner(System.in);
        //System.out.println(WeChesspresso.moveValidator(fen,"e2e4"));
        //System.out.println(WeChesspresso.getShortMoveFromString(fen,"e2e4"));
        while(true){
            System.out.println("FEN :"+fen);
            System.out.println("Your move: ");
            move=input.nextLine();
            newfen=WeChesspresso.moveValidator(fen, move);
            if(!newfen.equals("no")){
                fen=newfen;
            }
            
        }*/
        
        
        
        
    }
}
