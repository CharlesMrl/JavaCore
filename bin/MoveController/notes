 TO DO RECHERCHE
 algo pour déterminer quelle pièce va ou, array list objet contenant coordonnée depart, arrivée, longueur
 utiliser dijkstra une première fois.
 généré ensuite les chemins
 partir de la case d'arrivée ??
 
 SO
 On a 2 FEN / tableaux
 on récupère 2 nouveaux tableaux en "soustrayant" un a un les deux tableaux
 		init - target -> tableaux des pièces qui doivent bouger
 		target - init -> tableaux des positions de destinations des pièces qui doivent bouger
 code pour visualiser point précédent:
String feninit = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -";
String newfen = "R1b1k2n/ppp5/4K2p/8/3p4/8/Pq6/3Q1Bb1 w KQkq - 0 5";

System.out.println("Init board");
printBoard(getFullBoard(feninit));
System.out.println("\nTarget board");
printBoard(getFullBoard(newfen));
System.out.println("\nSub init - target");
printBoard(substrctBoards(getFullBoard(feninit), getFullBoard(newfen)));
System.out.println("\nSub target - init");
printBoard(substrctBoards(getFullBoard(newfen), getFullBoard(feninit)));

init	->	rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR
target	->	R1b1k2n/ppp5/4K2p/8/3p4/8/Pq6/3Q1Bb1

	Init board
. . r n b q k b n r . . 
. . p p p p p p p p . . 
. . . . . . . . . . . . 
. . . . . . . . . . . . 
. . . . . . . . . . . . 
. . . . . . . . . . . . 
. . P P P P P P P P . . 
. . R N B Q K B N R . . 


	Target board
r . R . b . k . . n P R 
. . p p p . . . . . P N 
. . . . . . K . . p P B 
. . . . . . . . . . P . 
. . . . . p . . . . P . 
. p . . . . . . . . P . 
n p P q . . . . . . P N 
r p . . . Q . B b . . . 


 Pieces that need to move
. . r n . q . b n r . . 
. . . . . p p p p p . . 
. . . . . . . . . . . . 
. . . . . . . . . . . . 
. . . . . . . . . . . . 
. . . . . . . . . . . . 
. . . P P P P P P P . . 
. . R N B . K . N R . . 


Destination of previous pieces
r . R . . . . . . n P R 
. . . . . . . . . . P N 
. . . . . . K . . p P B 
. . . . . . . . . . P . 
. . . . . p . . . . P . 
. p . . . . . . . . P . 
n p . q . . . . . . P N 
r p . . . . . . b . . . 
		

 
 Donc:	dijkstra de toutes les cases du tableau de postion avec pour source les cases dest, et pour dest la ou les pièces correspondante,
 		sachant qu'on gardera le plus court.
 On aura donc le chemin que chaque pièce doit effectuer
 ensuite petit algo pour déterminer dans quel ordre on effectue ces chemins.
 